name: CI

on:
  push:
   # branches: [ main ]
   branches:
     - main
jobs:
  pre-build:
    env:
      JOB_ENVIRONMENT_VARIABLE: 'custom job environment variable for ubuntu'
    runs-on: ubuntu-latest
    steps:
    - run: echo  "The job was automatically triggered by a ${{ github.event_name }} event."
    - run: echo  "This job is now running on a ${{ runner.os }} server hosted by GitHub!"
    - run: echo  "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
    - run: echo "${{ secrets.PASSWORD }}"
    - name: Print custom environment variables from ubuntu-latest
      env:
        STEP_ENVIRONMENT_VARIABLE: 'custom step environment variable for bash'
      run: |
        echo "Accessing environment variables in run command"
        echo "$WORKSPACE_ENVIRONMENT_VARIABLE"
        echo "$JOB_ENVIRONMENT_VARIABLE"
        echo "$STEP_ENVIRONMENT_VARIABLE"
  unit-test:
    needs: database-integration
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository code
      uses: actions/checkout@v2
  SCA:
  #  needs: database-integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        continue-on-error: true
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --file=Dockerfile
  SAST:
    needs: [ unit-test ]
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
  database-integration:
    needs: pre-build
    runs-on: ubuntu-latest
    container: node:10.18-jessie
    services:
      postgres:
        image: postgres
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Connect to PostgreSQL
        run: python --version #validate_db.py
        env:
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432          
          
  #next steps:
  build:
    needs: [ SAST ]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: gitops-argocd

      run: |
        # Build a docker container and push it to ECR
        git_hash=$(git rev-parse --short "$GITHUB_SHA")
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash"
        
    - name: Update Version
      run: |
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          version=$(cat ./charts/helm-example/values.yaml | grep version: | awk '{print $2}')
          sed -i "s/$version/${GITHUB_REF##*/}-$git_hash/" ./charts/helm-example/values.yaml
          
    - name: Commit and push changes
      uses: devops-infra/action-commit-push@v0.3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        commit_message: Version updated
