name: CI

on:
  push:
   # branches: [ main ]
   branches:
     - main
jobs:
#  pre-build:
#    env:
#      JOB_ENVIRONMENT_VARIABLE: 'custom job environment variable for ubuntu'
#    runs-on: ubuntu-latest
#    steps:
#    - run: echo  "The job was automatically triggered by a ${{ github.event_name }} event."
#    - run: echo  "This job is now running on a ${{ runner.os }} server hosted by GitHub!"
#    - run: echo  "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
#    - run: echo "${{ secrets.PASSWORD }}"
#    - name: Print custom environment variables from ubuntu-latest
#      env:
#        STEP_ENVIRONMENT_VARIABLE: 'custom step environment variable for bash'
#      run: |
#        echo "Accessing environment variables in run command"
#        echo "$WORKSPACE_ENVIRONMENT_VARIABLE"
#        echo "$JOB_ENVIRONMENT_VARIABLE"
#        echo "$STEP_ENVIRONMENT_VARIABLE"
        
#  database-integration:
#    needs: pre-build
#    runs-on: ubuntu-latest
#    container: node:10.18-jessie
#    services:
#      postgres:
#        image: postgres
#    steps:
#      - name: Check out repository code
#        uses: actions/checkout@v2
#      - name: Connect to PostgreSQL
#        run: python --version #validate_db.py
#        env:
#          POSTGRES_HOST: postgres
#          POSTGRES_PORT: 5432  


#  unit-test:
#    needs: database-integration
#    runs-on: ubuntu-latest
#    steps:
#    - name: Check out repository code
#      uses: actions/checkout@v2

#  SCA:
#    needs: database-integration
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#        continue-on-error: true
#      - name: Run Snyk to check for vulnerabilities
#        uses: snyk/actions/docker@master
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#        with:
#          command: monitor
#          args: --file=./Dockerfile --project-name=insn0w/gitops

#  SAST:
#    needs: [ unit-test ]
#    name: SonarCloud
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#      - name: SonarCloud Scan
#        uses: SonarSource/sonarcloud-github-action@master
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
          
  #next steps:
  build:
   # needs: [ SAST ]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
 #       aws-region: ${{ secrets.AWS_REGION }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
      
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: new-cgafrica-backend
            IMAGE_TAG: ${{ github.sha }}

    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    -  

      uses: docker/build-push-action@v2
      with:
          context: .
          file: ./Dockerfile
          push: true 
          tags: ${{ github.sha }}/nginx:latest
 #     run: |
 #           # Build a docker container and
 #           # push it to ECR so that it can
 #           # be deployed to ECS.
 #           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
 #           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
 #           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

#    - name: Build, tag, and push image to Amazon ECR
#      id: build-image
#      env:
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        ECR_REPOSITORY: gitops

#      run: |
#        # Build a docker container and push it to ECR
#        git_hash=$(git rev-parse --short "$GITHUB_SHA")
#        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash .
#        echo "Pushing image to ECR..."
#        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash
#        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash"
        
#    - name: Update Version
#      run: |
#          git_hash=$(git rev-parse --short "$GITHUB_SHA")
#          version=$(cat ./charts/helm-example/values.yaml | grep version: | awk '{print $2}')
#          sed -i "s/$version/${GITHUB_REF##*/}-$git_hash/" ./charts/helm-example/values.yaml
          
#    - name: Commit and push changes
#      uses: devops-infra/action-commit-push@v0.3
#      with:
#        github_token: ${{ secrets.GITHUB_TOKEN }}
#        commit_message: Version updated
